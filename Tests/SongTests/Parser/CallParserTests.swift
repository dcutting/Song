import XCTest
import Song

class CallParserTests: XCTestCase {

    func test_shouldParse() {
        "1.inc".makes(.call("inc", [.int(1)]))
        "x.inc".makes(.call("inc", [.name("x")]))
        "1.inc()".makes(.call("inc", [.int(1)]))
        "1.inc.foo".makes(.call("foo", [.call("inc", [.int(1)])]))
        "1.inc.foo()".makes(.call("foo", [.call("inc", [.int(1)])]))
        "1.inc().foo".makes(.call("foo", [.call("inc", [.int(1)])]))
        "1.inc().foo()".makes(.call("foo", [.call("inc", [.int(1)])]))
        "foo().inc".makes(.call("inc", [.call("foo", [])]))
        "foo()().inc".makes(.call("inc", [.eval(.call("foo", []), [])]))
        "foo().bar()".makes(.call("bar", [.call("foo", [])]))
        "(5).foo.bar".makes(.call("bar", [.call("foo", [.int(5)])]))
        "(5.foo).bar".makes(.call("bar", [.call("foo", [.int(5)])]))
        "(5.foo)(4)".makes(.eval(.call("foo", [.int(5)]), [.int(4)]))
        "5.(foo).bar".makes(.call("bar", [.eval(.name("foo"), [.int(5)])]))
        "5.(foo.bar)".makes(.eval(.call("bar", [.name("foo")]), [.int(5)]))
        "(||5)()".makes(.eval(.lambda([], .int(5)), []))
        "(|x|x)(1)".makes(.eval(.lambda([.name("x")], .name("x")), [.int(1)]))
        "(|x|x)(1)(2)".makes(.eval(.eval(.lambda([.name("x")], .name("x")), [.int(1)]), [.int(2)]))
        "(|x|x)(1)(2).foo".makes(.call("foo", [.eval(.eval(.lambda([.name("x")], .name("x")), [.int(1)]), [.int(2)])]))
        "1.(|x|x)".makes(.eval(.lambda([.name("x")], .name("x")), [.int(1)]))
        "(foo)()".makes(.eval(.name("foo"), []))
        "(foo())()".makes(.eval(.call("foo", []), []))
        "foo()".makes(.call("foo", []))
        "foo(bar)".makes(.call("foo", [.name("bar")]))
        "foo(bar())".makes(.call("foo", [.call("bar", [])]))
        "foo(bar(baz()))".makes(.call("foo", [.call("bar", [.call("baz", [])])]))
        "foo(bar()())".makes(.call("foo", [.eval(.call("bar", []), [])]))
        "foo(bar(baz()())())".makes(.call("foo", [.eval(.call("bar", [.eval(.call("baz", []), [])]), [])]))
        "foo(bar(baz()())()).inc".makes(.call("inc", [.call("foo", [.eval(.call("bar", [.eval(.call("baz", []), [])]), [])])]))
        "foo(((Yes)))".makes(.call("foo", [.bool(true)]))
        "foo(|x|x)".makes(.call("foo", [.lambda([.name("x")], .name("x"))]))
        "foo(|x|(x))".makes(.call("foo", [.lambda([.name("x")], .name("x"))]))
        "foo((|x|x))".makes(.call("foo", [.lambda([.name("x")], .name("x"))]))
        "foo(((|x|x)))".makes(.call("foo", [.lambda([.name("x")], .name("x"))]))
        "1.foo((|x|x))".makes(.call("foo", [.int(1), .lambda([.name("x")], .name("x"))]))
        "foo(|x|x,|y|y)".makes(.call("foo", [.lambda([.name("x")], .name("x")), .lambda([.name("y")], .name("y"))]))
        "foo(|x|x.foo(bar()())(),1)".makes(.call("foo", [.eval(.lambda([.name("x")], .eval(.call("foo", [.name("x"), .eval(.call("bar", []), [])]), [])), [.int(1)])]))
        "1.foo()".makes(.call("foo", [.int(1)]))
        "1.foo(2)(3)".makes(.eval(.call("foo", [.int(1), .int(2)]), [.int(3)]))
        "1.foo(2)(3).bar".makes(.call("bar", [.eval(.call("foo", [.int(1), .int(2)]), [.int(3)])]))
        "1.(foo)(2)(3)".makes(.eval(.eval(.eval(.name("foo"), [.int(1)]), [.int(2)]), [.int(3)]))
        "(1.foo)(2)".makes(.eval(.call("foo", [.int(1)]), [.int(2)]))
        "1.foo()(2)".makes(.eval(.call("foo", [.int(1)]), [.int(2)]))
        "1.(foo())(2)".makes(.eval(.eval(.call("foo", []), [.int(1)]), [.int(2)]))
        "1.foo(3)(4)".makes(.eval(.call("foo", [.int(1), .int(3)]), [.int(4)]))
        "1.(foo(3))(2)".makes(.eval(.eval(.call("foo", [.int(3)]), [.int(1)]), [.int(2)]))
        "foo.bar.baz".makes(.call("baz", [.call("bar", [.name("foo")])]))
        "foo(1).foo(2)(3).bar".makes(.call("bar", [.eval(.call("foo", [.call("foo", [.int(1)]), .int(2)]), [.int(3)])]))
        "(foo).bar".makes(.call("bar", [.name("foo")]))
        "(foo(2)).bar".makes(.call("bar", [.call("foo", [.int(2)])]))
        "1.(foo.bar).bar".makes(.call("bar", [.eval(.call("bar", [.name("foo")]), [.int(1)])]))
        "(foo.bar).bar".makes(.call("bar", [.call("bar", [.name("foo")])]))
        "foo(bar())".makes(.call("foo", [.call("bar", [])]))
        "foo(4.bar)".makes(.call("foo", [.call("bar", [.int(4)])]))
        "foo(4.bar())".makes(.call("foo", [.call("bar", [.int(4)])]))
        "foo().bar".makes(.call("bar", [.call("foo", [])]))
        "foo()().bar".makes(.call("bar", [.eval(.call("foo", []), [])]))
        "foo.bar()()".makes(.eval(.call("bar", [.name("foo")]), []))
        "foo(4.foo(bar(2))).(foo()().bar).bar(3)".makes(.call("bar", [.eval(.call("bar", [.eval(.call("foo", []), [])]), [.call("foo", [.call("foo", [.int(4), .call("bar", [.int(2)])])])]), .int(3)]))
        "(|x|x)(1)".makes(.eval(.lambda([.name("x")], .name("x")), [.int(1)]))
        "((|x|x))(1)".makes(.eval(.lambda([.name("x")], .name("x")), [.int(1)]))
        "(|x|x).foo(1)".makes(.call("foo", [.lambda([.name("x")], .name("x")), .int(1)]))
        "(x)(1)(2,3).bar".makes(.call("bar", [.eval(.eval(.name("x"), [.int(1)]), [.int(2), .int(3)])]))
        "(|x|x)(1)(2,3).bar".makes(.call("bar", [.eval(.eval(.lambda([.name("x")], .name("x")), [.int(1)]), [.int(2), .int(3)])]))
        "(|x|x)().bar".makes(.call("bar", [.eval(.lambda([.name("x")], .name("x")), [])]))
        "1.(|x|x)".makes(.eval(.lambda([.name("x")], .name("x")), [.int(1)]))
        "1.(|x|x)()".makes(.eval(.eval(.lambda([.name("x")], .name("x")), [.int(1)]), []))
        "foo().(|x|x)()".makes(.eval(.eval(.lambda([.name("x")], .name("x")), [.call("foo", [])]), []))
        "foo.bar(|x|x).baz".makes(.call("baz", [.call("bar", [.name("foo"), .lambda([.name("x")], .name("x"))])]))
        "bar(|x|x)".makes(.call("bar", [.lambda([.name("x")], .name("x"))]))
        "foo((5))".makes(.call("foo", [.int(5)]))
        "bar(|x|foo(x))".makes(.call("bar", [.lambda([.name("x")], .call("foo", [.name("x")]))]))
        "x.foo(2)(3,4)(5).bar(6)(7)".makes(.eval(.call("bar", [.eval(.eval(.call("foo", [.name("x"), .int(2)]), [.int(3), .int(4)]), [.int(5)]), .int(6)]), [.int(7)]))
        "x.foo(2)(3).bar".makes(.call("bar", [.eval(.call("foo", [.name("x"), .int(2)]), [.int(3)])]))
        "lessThan(5)(4)".makes(.eval(.call("lessThan", [.int(5)]), [.int(4)]))
        "(1+2).foo".makes(.call("foo", [.call("+", [.int(1), .int(2)])]))
        "foo(_)".makes(.call("foo", [.ignore]))
        "(1 < 10).negate".makes(.call("negate", [.call("<", [.int(1), .int(10)])]))
        "(Do 5, 8 End).inc".makes(.call("inc", [.scope([.int(5), .int(8)])]))
        "(Do |x| x+1 End)(5)".makes(.eval(.scope([.function(Function(name: nil, patterns: [.name("x")], when: .bool(true), body: .call("+", [.name("x"), .int(1)])))]), [.int(5)]))
        "(inc(1)).inc".makes(.call("inc", [.call("inc", [.int(1)])]))
        "(x)()".makes(.eval(.name("x"), []))
        "5.lessThan()(4)".makes(.eval(.call("lessThan", [.int(5)]), [.int(4)]))
        "(5.lessThan())(4)".makes(.eval(.call("lessThan", [.int(5)]), [.int(4)]))
        "(5.lessThan)(4)".makes(.eval(.call("lessThan", [.int(5)]), [.int(4)]))
        "lessThan(5)(4)".makes(.eval(.call("lessThan", [.int(5)]), [.int(4)]))
        "(|x| x+1)(4)".makes(.eval(.lambda([.name("x")], .call("+", [.name("x"), .int(1)])), [.int(4)]))
        "4.(|x| x+1)".makes(.eval(.lambda([.name("x")], .call("+", [.name("x"), .int(1)])), [.int(4)]))
        "4.(|x| x+1)()".makes(.eval(.eval(.lambda([.name("x")], .call("+", [.name("x"), .int(1)])), [.int(4)]), []))
        "foo( x( a , b ) , y( c , d) )".makes(.call("foo", [.call("x", [.name("a"), .name("b")]), .call("y", [.name("c"), .name("d")])]))
"""
foo(
  x
 ,
  y
 )
""".makes(.call("foo", [.name("x"), .name("y")]))
    }

    func test_shouldNotParse() {
        "4()".fails()
        "4.|x|x".fails()
        "(4)()".fails()
    }
}
