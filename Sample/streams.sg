#!/usr/bin/env song

# Streams are infinite lazy lists.

# They are modelled as a list of two items:
# the "current" value, and a "then" which is a thunk
# that when evaluated returns a new advanced stream.

[current, _].current = current
[_, next].next = next()

# Construct a stream by providing an initial value and a lambda
# that can construct future values.

x.then(f) = [x, || f(x).then(f)]

# Lazily map a supplied function to a stream.

stream.lazyMap(f) = [f(stream.current), || stream.next.lazyMap(f)]

# Zip two streams together.

a.lazyZip(b) = a.lazyZip(b, |x, y| [x, y])
a.lazyZip(b, f) = [f(a.current, b.current), || a.next.lazyZip(b.next, f)]

# Cycle endlessly through a given list.

list.cycle = list.cycle(0)
list.cycle(i) = Do
  j = (i + 1) Mod list.length
  [list.at(i), || list.cycle(j)]
End

# Greedily return the next "n" items of a stream in a list.

stream.lazyTake(0) = []
stream.lazyTake(n) = [stream.current|stream.next.lazyTake(n-1)]

# Make a stream of numbers starting from "n".

n.andUp = n.then(|x| x+1)

# Now play with the streams.

naturals = 1.andUp
naturals.lazyTake(10).out
naturals.lazyMap(|x| x*2).lazyTake(10).out
"abc".cycle.lazyTake(50).out
"abc".cycle.lazyZip(naturals).lazyTake(10).out
"abc".cycle.lazyZip(naturals, anyJoin).lazyTake(10).out
