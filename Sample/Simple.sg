[].select(_) = []
[x|xs].select(f) when f(x) = [x] + xs.select(f)
[x|xs].select(f) = xs.select(f)

list = [-1, 1, -2, 3]
out(list)
# [-1, 1, -2, 3]

positives = list.select(|x| x >= 0)
out(positives)
# [1, 3]

min(x, y) when x < y = x
min(_, y) = y

result = min(8, 4)
out(result)
# 4

# Reverse
list.reverse = list.reverse([])
[].reverse(result) = result
[x|xs].reverse(result) = xs.reverse([x|result])

# Append
front.append(back) = back.reversePrepend(front.reverse)
back.reversePrepend([]) = back
back.reversePrepend([x|xs]) = [x|back].reversePrepend(xs)

# Backwards
[].backwards = []
[x|xs].backwards = xs.backwards.append([x])

# Fibonacci
n.fib = n.fib(0, 1)
0.fib(a, b) = a
n.fib(a, b) = (n-1).fib(b, a+b)

list.reverse = list.reverse([])
[].reverse(result) = result
[x|xs].reverse(result) = xs.reverse([x|result])

front.append(back) = back.reversePrepend(front.reverse)
back.reversePrepend([]) = back
back.reversePrepend([x|xs]) = [x|back].reversePrepend(xs)

[].sort = []
[p|xs].sort = do
  let {
    left = xs.select(|x| x < p)
    let {
      right = xs.select(|x| x >= p)
      let {
        left.sort ++ [p] ++ right.sort
      }
    }
  }
end

[].zip(_) = []
_.zip([]) = []
[x|xs].zip([y|ys]) = [[x,y]|xs.zip(ys)]

1.times(f) = f()
  x.times(f) when x > 1 = do
  f()
  (x-1).times(f)
end

[].extract(_) = []
[x|xs].extract(x) = [x] + xs.extract(x)
[_|xs].extract(x) = xs.extract(x)
[1,2,3,4,5].extract(2)



x = 5
foo(1) = 2
foo(a) = do
  y = 7
  foo(4) = 8
  out(x)
  out(y)
  foo(a-1) * foo(x) * y
end
foo(2)

# Instead of let having a single binding and body expression, it should be a sequence of expressions.
# Everything in the same scope would be appended to the let.
# Subscopes ("do" keyword) would be a new "scope" expression with a new body.

scope
    assign x, 5
    func foo, 1, 2
    func foo, a, scope
        assign y, 7
        func foo, 4, 8
        call out, x
        call out, y
        call *, foo(a-1), foo(x), y
    call foo, 2


# Old "let"

let {
    x=5
    body=let {
        foo=
            subfunction {
                patterns=[1]
                body=2
            }
        body=let {
            foo=
                subfunction {
                    patterns=[a]
                    body=let {
                        y=7
                        let {
                            foo=
                                subfunction {
                                    patterns=[4]
                                    body=8
                                }
                                body=sequence {
                                    call {
                                        out(x)
                                    },
                                    sequence {
                                        call {
                                            out(y)
                                        },
                                        call {
                                            * [foo(a-1), foo(x), y]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            body=call {
                foo [2]
            }
        }
    }
}

"exp" = ?
Read line
If line is subfunction or assignment
    line becomes new let statement with line as binding and empty body array
    "exp" is new let statement
else
    "exp" is expression for that line
end
append "exp" to deepest body array
