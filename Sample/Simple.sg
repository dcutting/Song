[].select(_) = []
[x|xs].select(f) when f(x) = [x] + xs.select(f)
[x|xs].select(f) = xs.select(f)

list = [-1, 1, -2, 3]
out(list)
# [-1, 1, -2, 3]

positives = list.select(|x| x >= 0)
out(positives)
# [1, 3]

min(x, y) when x < y = x
min(_, y) = y

result = min(8, 4)
out(result)
# 4

# Reverse
list.reverse = list.reverse([])
[].reverse(result) = result
[x|xs].reverse(result) = xs.reverse([x|result])

# Append
front.append(back) = back.reversePrepend(front.reverse)
back.reversePrepend([]) = back
back.reversePrepend([x|xs]) = [x|back].reversePrepend(xs)

# Backwards
[].backwards = []
[x|xs].backwards = xs.backwards.append([x])

# Fibonacci
n.fib = n.fib(0, 1)
0.fib(a, b) = a
n.fib(a, b) = (n-1).fib(b, a+b)

list.reverse = list.reverse([])
[].reverse(result) = result
[x|xs].reverse(result) = xs.reverse([x|result])

front.append(back) = back.reversePrepend(front.reverse)
back.reversePrepend([]) = back
back.reversePrepend([x|xs]) = [x|back].reversePrepend(xs)

[].sort = []
[p|xs].sort = do
  left = xs.select(|x| x < p)
  right = xs.select(|x| x >= p)
  left.sort ++ [p] ++ right.sort
end
